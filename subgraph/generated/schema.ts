// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Node extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Node entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Node must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Node", id.toString(), this);
    }
  }

  static load(id: string): Node | null {
    return changetype<Node | null>(store.get("Node", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nodeId(): BigInt {
    let value = this.get("nodeId");
    return value!.toBigInt();
  }

  set nodeId(value: BigInt) {
    this.set("nodeId", Value.fromBigInt(value));
  }

  get isPending(): boolean {
    let value = this.get("isPending");
    return value!.toBoolean();
  }

  set isPending(value: boolean) {
    this.set("isPending", Value.fromBoolean(value));
  }

  get isOpen(): boolean {
    let value = this.get("isOpen");
    return value!.toBoolean();
  }

  set isOpen(value: boolean) {
    this.set("isOpen", Value.fromBoolean(value));
  }

  get lend_lender(): Bytes {
    let value = this.get("lend_lender");
    return value!.toBytes();
  }

  set lend_lender(value: Bytes) {
    this.set("lend_lender", Value.fromBytes(value));
  }

  get lend_choiceOfStable(): i32 {
    let value = this.get("lend_choiceOfStable");
    return value!.toI32();
  }

  set lend_choiceOfStable(value: i32) {
    this.set("lend_choiceOfStable", Value.fromI32(value));
  }

  get lend_interestRate(): i32 {
    let value = this.get("lend_interestRate");
    return value!.toI32();
  }

  set lend_interestRate(value: i32) {
    this.set("lend_interestRate", Value.fromI32(value));
  }

  get lend_assets(): BigInt {
    let value = this.get("lend_assets");
    return value!.toBigInt();
  }

  set lend_assets(value: BigInt) {
    this.set("lend_assets", Value.fromBigInt(value));
  }

  get lend_filled(): boolean {
    let value = this.get("lend_filled");
    return value!.toBoolean();
  }

  set lend_filled(value: boolean) {
    this.set("lend_filled", Value.fromBoolean(value));
  }

  get lend_acceptingRequests(): boolean {
    let value = this.get("lend_acceptingRequests");
    return value!.toBoolean();
  }

  set lend_acceptingRequests(value: boolean) {
    this.set("lend_acceptingRequests", Value.fromBoolean(value));
  }

  get lend_approvalBased(): boolean {
    let value = this.get("lend_approvalBased");
    return value!.toBoolean();
  }

  set lend_approvalBased(value: boolean) {
    this.set("lend_approvalBased", Value.fromBoolean(value));
  }

  get lend_minCollateralPercentage(): i32 {
    let value = this.get("lend_minCollateralPercentage");
    return value!.toI32();
  }

  set lend_minCollateralPercentage(value: i32) {
    this.set("lend_minCollateralPercentage", Value.fromI32(value));
  }

  get borrow_borrower(): Bytes {
    let value = this.get("borrow_borrower");
    return value!.toBytes();
  }

  set borrow_borrower(value: Bytes) {
    this.set("borrow_borrower", Value.fromBytes(value));
  }

  get borrow_collateral(): Bytes {
    let value = this.get("borrow_collateral");
    return value!.toBytes();
  }

  set borrow_collateral(value: Bytes) {
    this.set("borrow_collateral", Value.fromBytes(value));
  }

  get borrow_collateralIn(): BigInt {
    let value = this.get("borrow_collateralIn");
    return value!.toBigInt();
  }

  set borrow_collateralIn(value: BigInt) {
    this.set("borrow_collateralIn", Value.fromBigInt(value));
  }

  get borrow_maximumExpectedOutput(): BigInt {
    let value = this.get("borrow_maximumExpectedOutput");
    return value!.toBigInt();
  }

  set borrow_maximumExpectedOutput(value: BigInt) {
    this.set("borrow_maximumExpectedOutput", Value.fromBigInt(value));
  }

  get borrow_tenure(): i32 {
    let value = this.get("borrow_tenure");
    return value!.toI32();
  }

  set borrow_tenure(value: i32) {
    this.set("borrow_tenure", Value.fromI32(value));
  }

  get borrow_indexOfCollateral(): i32 {
    let value = this.get("borrow_indexOfCollateral");
    return value!.toI32();
  }

  set borrow_indexOfCollateral(value: i32) {
    this.set("borrow_indexOfCollateral", Value.fromI32(value));
  }

  get borrow_maxPayableInterest(): i32 {
    let value = this.get("borrow_maxPayableInterest");
    return value!.toI32();
  }

  set borrow_maxPayableInterest(value: i32) {
    this.set("borrow_maxPayableInterest", Value.fromI32(value));
  }

  get borrow_restricted(): boolean {
    let value = this.get("borrow_restricted");
    return value!.toBoolean();
  }

  set borrow_restricted(value: boolean) {
    this.set("borrow_restricted", Value.fromBoolean(value));
  }

  get borrow_personalised(): boolean {
    let value = this.get("borrow_personalised");
    return value!.toBoolean();
  }

  set borrow_personalised(value: boolean) {
    this.set("borrow_personalised", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Borrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Borrow entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Borrow must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Borrow", id.toString(), this);
    }
  }

  static load(id: string): Borrow | null {
    return changetype<Borrow | null>(store.get("Borrow", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nodeId(): BigInt {
    let value = this.get("nodeId");
    return value!.toBigInt();
  }

  set nodeId(value: BigInt) {
    this.set("nodeId", Value.fromBigInt(value));
  }

  get borrower(): Bytes {
    let value = this.get("borrower");
    return value!.toBytes();
  }

  set borrower(value: Bytes) {
    this.set("borrower", Value.fromBytes(value));
  }

  get assets(): BigInt {
    let value = this.get("assets");
    return value!.toBigInt();
  }

  set assets(value: BigInt) {
    this.set("assets", Value.fromBigInt(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    return value!.toBigInt();
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get interest(): i32 {
    let value = this.get("interest");
    return value!.toI32();
  }

  set interest(value: i32) {
    this.set("interest", Value.fromI32(value));
  }

  get choice(): i32 {
    let value = this.get("choice");
    return value!.toI32();
  }

  set choice(value: i32) {
    this.set("choice", Value.fromI32(value));
  }

  get tenure(): i32 {
    let value = this.get("tenure");
    return value!.toI32();
  }

  set tenure(value: i32) {
    this.set("tenure", Value.fromI32(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Lend extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Lend entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Lend must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("Lend", id.toString(), this);
    }
  }

  static load(id: string): Lend | null {
    return changetype<Lend | null>(store.get("Lend", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get nodeId(): BigInt {
    let value = this.get("nodeId");
    return value!.toBigInt();
  }

  set nodeId(value: BigInt) {
    this.set("nodeId", Value.fromBigInt(value));
  }

  get lender(): Bytes {
    let value = this.get("lender");
    return value!.toBytes();
  }

  set lender(value: Bytes) {
    this.set("lender", Value.fromBytes(value));
  }

  get choice(): i32 {
    let value = this.get("choice");
    return value!.toI32();
  }

  set choice(value: i32) {
    this.set("choice", Value.fromI32(value));
  }

  get interest(): i32 {
    let value = this.get("interest");
    return value!.toI32();
  }

  set interest(value: i32) {
    this.set("interest", Value.fromI32(value));
  }

  get assets(): BigInt {
    let value = this.get("assets");
    return value!.toBigInt();
  }

  set assets(value: BigInt) {
    this.set("assets", Value.fromBigInt(value));
  }

  get filled(): boolean {
    let value = this.get("filled");
    return value!.toBoolean();
  }

  set filled(value: boolean) {
    this.set("filled", Value.fromBoolean(value));
  }

  get acceptingRequests(): boolean {
    let value = this.get("acceptingRequests");
    return value!.toBoolean();
  }

  set acceptingRequests(value: boolean) {
    this.set("acceptingRequests", Value.fromBoolean(value));
  }

  get ab(): boolean {
    let value = this.get("ab");
    return value!.toBoolean();
  }

  set ab(value: boolean) {
    this.set("ab", Value.fromBoolean(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    return value!.toBigInt();
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    return value!.toBigInt();
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    return value!.toBytes();
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    return value!.toBytes();
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get lends(): Array<string> {
    let value = this.get("lends");
    return value!.toStringArray();
  }

  set lends(value: Array<string>) {
    this.set("lends", Value.fromStringArray(value));
  }

  get borrows(): Array<string> {
    let value = this.get("borrows");
    return value!.toStringArray();
  }

  set borrows(value: Array<string>) {
    this.set("borrows", Value.fromStringArray(value));
  }

  get positions(): Array<string> {
    let value = this.get("positions");
    return value!.toStringArray();
  }

  set positions(value: Array<string>) {
    this.set("positions", Value.fromStringArray(value));
  }

  get pairedPositions(): Array<string> {
    let value = this.get("pairedPositions");
    return value!.toStringArray();
  }

  set pairedPositions(value: Array<string>) {
    this.set("pairedPositions", Value.fromStringArray(value));
  }
}
